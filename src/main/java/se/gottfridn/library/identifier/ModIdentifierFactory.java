package se.gottfridn.library.identifier;


import se.gottfridn.library.logger.EncapsulatedLogger;
import se.gottfridn.library.logger.EncapsulatedLoggerFactory;

/**
 *	The {@code ModIdentifierFactory} class is a factory for creating instances of {@code ModIdentifier}.
 *
 * <p>
 *     	The class provides the static methods
 * 		{@link ModIdentifierFactory#getIdentifier(String)} and
 * 		{@link ModIdentifierFactory#getIdentifier(String, String)}
 * 		for creating instances of {@link ModIdentifier} with specified {@link String} name and id.
 * </p><p>
 *     It also has a built in logger that uses the {@link EncapsulatedLogger} api.
 * </p>
 *
 * <p>Usage example:
 * <blockquote><pre>
 * ModIdentifier identifier = ModIdentifierFactory.getIdentifier("name");
 * String id = identifier.getId();
 * String name = identifier.getName();
 * </pre></blockquote>
 * or:
 * <blockquote><pre>
 * ModIdentifier identifier = ModIdentifierFactory.getIdentifier("name", "weirdly_different_id");
 * String id = identifier.getId();
 * String name = identifier.getName();
 * </pre></blockquote></p>
 *
 * @apiNote The implementation for this is {@link ModIdentifierImplementation}
 *
 * @see ModIdentifier
 * @see ModIdentifierFactory#getIdentifier(String)
 * @see ModIdentifierFactory#getIdentifier(String, String)
 */

@SuppressWarnings("unused")
public class ModIdentifierFactory {
	private static final EncapsulatedLogger logger = EncapsulatedLoggerFactory.getLogger("mod_identifier_factory", true, false);

	/**
	 * Constructs a new {@link ModIdentifier} instance using {@link ModIdentifierFactory#getIdentifier(String, String)} with the specified {@code name} and automatically generated {@code id}.
	 * <p>
	 *     The {@code id} is automatically generated by converting the {@code name} to {@literal snake_case}, this is done because it is Minecraft's standard.
	 * </p>
	 *
	 * @param name The  {@code name} to be used. This is used to generate the {@code id}.
	 *
	 * @throws IllegalArgumentException If the {@code id} doesn't conform to the {@literal snake_case} format.
	 *
	 * @return A new {@link ModIdentifier} instances with the given {@code name} and automatically generated {@code id}.
	 *
	 * @see ModIdentifierImplementation
	 * @see ModIdentifierFactory#getIdentifier(String, String)
	 */
	public static ModIdentifier getIdentifier(String name) {
		// converts the name to snake_case
		final String id = name.toLowerCase().replaceAll("[^a-zA-Z0-9_]+", "_").replaceAll("_+", "_");
		return getIdentifier(name, id);
	}

	/**
	 * Constructs a new {@link ModIdentifier} instance using {@link ModIdentifierImplementation} with the specified {@code name} and {@code id}.
	 *
	 * @param name The  {@code name} to be used.
	 * @param id The {@code id} to be used.
	 *
	 * @throws IllegalArgumentException If the {@code id} doesn't conform to the {@literal snake_case} format.
	 *
	 * @return A new {@link ModIdentifier} instances with the given {@code name} and {@code id}.
	 *
	 * @see ModIdentifierImplementation
	 * @see ModIdentifierFactory#getIdentifier(String)
	 */
	public static ModIdentifier getIdentifier(String name, String id) {
		if (!id.matches("^[a-z0-9]+(_[a-z0-9]+)*$")) {
			logger.error("Illegal id: " + id + " doesn't conform to snake_case format!", new IllegalArgumentException());
		}
		return new ModIdentifierImplementation(name, id);
	}

	public static final class ModIdentifierImplementation
		implements ModIdentifier{
		private final String name;
		private final String id;

		public ModIdentifierImplementation(String name, String id) {
			this.name = name;
			this.id = id;
		}

		@Override
		public String getId() {
			return id;
		}

		@Override
		public String getName() {
			return name;
		}
	}
}
